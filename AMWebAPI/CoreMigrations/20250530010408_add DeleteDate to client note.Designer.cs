// <auto-generated />
using System;
using AMServices.DataServices;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AMWebAPI.CoreMigrations
{
    [DbContext(typeof(AMCoreData))]
    [Migration("20250530010408_add DeleteDate to client note")]
    partial class addDeleteDatetoclientnote
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AMData.Models.CoreModels.AppointmentModel", b =>
                {
                    b.Property<long>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AppointmentId"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ClientCommunicationModel", b =>
                {
                    b.Property<long>("ClientCommunicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ClientCommunicationId"));

                    b.Property<DateTime?>("AttemptOne")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AttemptThree")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AttemptTwo")
                        .HasColumnType("datetime2");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendAfter")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.HasKey("ClientCommunicationId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientCommunication");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ClientModel", b =>
                {
                    b.Property<long>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ClientId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ClientNoteModel", b =>
                {
                    b.Property<long>("ClientNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ClientNoteId"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientNoteId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientNote");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ProviderBillingModel", b =>
                {
                    b.Property<long>("ProviderBillingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProviderBillingId"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DiscountAmount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProviderBillingId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderBilling");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ProviderCommunicationModel", b =>
                {
                    b.Property<long>("ProviderCommunicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProviderCommunicationId"));

                    b.Property<DateTime?>("AttemptOne")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AttemptThree")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AttemptTwo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SendAfter")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.HasKey("ProviderCommunicationId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderCommunication");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ProviderModel", b =>
                {
                    b.Property<long>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProviderId"));

                    b.Property<bool>("AccessGranted")
                        .HasColumnType("bit");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EMailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogindate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextBillingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayEngineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StateCode")
                        .HasColumnType("int");

                    b.Property<bool>("SubscriptionToBeCancelled")
                        .HasColumnType("bit");

                    b.Property<int>("TimeZoneCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("TrialEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderId");

                    b.HasIndex("PayEngineId")
                        .IsUnique()
                        .HasFilter("[PayEngineId] IS NOT NULL");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ResetPasswordRequestModel", b =>
                {
                    b.Property<long>("ResetPasswordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ResetPasswordId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<string>("QueryGuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Reset")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ResetPasswordId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ResetPasswordRequest");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ServiceModel", b =>
                {
                    b.Property<long>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ServiceId"));

                    b.Property<bool>("AllowClientScheduling")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.HasKey("ServiceId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.SessionActionModel", b =>
                {
                    b.Property<long>("SessionActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SessionActionId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SessionAction")
                        .HasColumnType("int");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.HasKey("SessionActionId");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionAction");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.SessionModel", b =>
                {
                    b.Property<long>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SessionId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.HasKey("SessionId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.UpdateProviderEMailRequestModel", b =>
                {
                    b.Property<long>("UpdateProviderEMailRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UpdateProviderEMailRequestId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewEMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<string>("QueryGuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UpdateProviderEMailRequestId");

                    b.HasIndex("ProviderId");

                    b.ToTable("UpdateProviderEMailRequest");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.VerifyProviderEMailRequestModel", b =>
                {
                    b.Property<long>("VerifyProviderEMailRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VerifyProviderEMailRequestId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<string>("QueryGuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VerifyProviderEMailRequestId");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.ToTable("VerifyProviderEMailRequest");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.AppointmentModel", b =>
                {
                    b.HasOne("AMData.Models.CoreModels.ClientModel", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AMData.Models.CoreModels.ProviderModel", "Provider")
                        .WithMany("Appointments")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AMData.Models.CoreModels.ServiceModel", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Provider");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ClientCommunicationModel", b =>
                {
                    b.HasOne("AMData.Models.CoreModels.ClientModel", "Client")
                        .WithMany("Communications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ClientModel", b =>
                {
                    b.HasOne("AMData.Models.CoreModels.ProviderModel", "Provider")
                        .WithMany("Clients")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ClientNoteModel", b =>
                {
                    b.HasOne("AMData.Models.CoreModels.ClientModel", "Client")
                        .WithMany("ClientNotes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ProviderBillingModel", b =>
                {
                    b.HasOne("AMData.Models.CoreModels.ProviderModel", "Provider")
                        .WithMany("ProviderBillings")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ProviderCommunicationModel", b =>
                {
                    b.HasOne("AMData.Models.CoreModels.ProviderModel", "Provider")
                        .WithMany("Communications")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ResetPasswordRequestModel", b =>
                {
                    b.HasOne("AMData.Models.CoreModels.ProviderModel", "Provider")
                        .WithMany("ResetPasswordRequests")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ServiceModel", b =>
                {
                    b.HasOne("AMData.Models.CoreModels.ProviderModel", "Provider")
                        .WithMany("Services")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.SessionActionModel", b =>
                {
                    b.HasOne("AMData.Models.CoreModels.SessionModel", "Session")
                        .WithMany("SessionActions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.SessionModel", b =>
                {
                    b.HasOne("AMData.Models.CoreModels.ProviderModel", "Provider")
                        .WithMany("Sessions")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.UpdateProviderEMailRequestModel", b =>
                {
                    b.HasOne("AMData.Models.CoreModels.ProviderModel", "Provider")
                        .WithMany("UpdateProviderEMailRequests")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.VerifyProviderEMailRequestModel", b =>
                {
                    b.HasOne("AMData.Models.CoreModels.ProviderModel", "Provider")
                        .WithOne("VerifyProviderEMailRequest")
                        .HasForeignKey("AMData.Models.CoreModels.VerifyProviderEMailRequestModel", "ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ClientModel", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ClientNotes");

                    b.Navigation("Communications");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ProviderModel", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Clients");

                    b.Navigation("Communications");

                    b.Navigation("ProviderBillings");

                    b.Navigation("ResetPasswordRequests");

                    b.Navigation("Services");

                    b.Navigation("Sessions");

                    b.Navigation("UpdateProviderEMailRequests");

                    b.Navigation("VerifyProviderEMailRequest")
                        .IsRequired();
                });

            modelBuilder.Entity("AMData.Models.CoreModels.ServiceModel", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("AMData.Models.CoreModels.SessionModel", b =>
                {
                    b.Navigation("SessionActions");
                });
#pragma warning restore 612, 618
        }
    }
}
